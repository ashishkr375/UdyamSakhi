'use client';

import { useState } from 'react';
import { Search, PlayCircle, FileText, ExternalLink, BookOpen, Film } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface Tutorial {
  id: string;
  title: string;
  description: string;
  type: 'video' | 'article';
  url: string;
  duration: string;
  category: string;
  tags: string[];
}

// Define the tab type for type safety
type TutorialTab = 'all' | 'video' | 'article';

const TUTORIAL_DATA: Tutorial[] = [
  {
    id: '1',
    title: 'Getting Started with Business Planning',
    description: 'Learn how to use our AI-powered business planning tools to create a comprehensive plan for your business.',
    type: 'video',
    url: 'https://youtube.com/watch?v=xyz',
    duration: '5:30',
    category: 'Business Planning',
    tags: ['business plan', 'AI assistant', 'getting started'],
  },
  {
    id: '2',
    title: 'Complete Guide to Business Registration',
    description: 'Step-by-step guide to registering your business, including document requirements and processes.',
    type: 'article',
    url: '/tutorials/business-registration-guide',
    duration: '10 min read',
    category: 'Legal & Compliance',
    tags: ['registration', 'legal', 'documents'],
  },
  {
    id: '3',
    title: 'Finding the Right Mentor',
    description: 'Tips on how to choose a mentor and make the most of your mentorship sessions.',
    type: 'video',
    url: 'https://youtube.com/watch?v=abc',
    duration: '7:45',
    category: 'Mentorship',
    tags: ['mentorship', 'guidance', 'networking'],
  },
  {
    id: '4',
    title: 'Understanding Financial Forecasts',
    description: 'Learn how to interpret and use the financial forecasts generated by our AI tools.',
    type: 'article',
    url: '/tutorials/financial-forecasts',
    duration: '15 min read',
    category: 'Finance',
    tags: ['finance', 'forecasting', 'planning'],
  },
  // Add more tutorials as needed
];

export function Tutorials() {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState<TutorialTab>('all');

  const filteredTutorials = TUTORIAL_DATA.filter(tutorial => {
    const matchesSearch = 
      tutorial.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tutorial.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tutorial.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    
    if (activeTab === 'all') return matchesSearch;
    return matchesSearch && tutorial.type === activeTab;
  });

  return (
    <div className="space-y-6">
      <div className="flex flex-col gap-4 md:flex-row md:items-center">
        <div className="relative flex-1">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
          <Input
            placeholder="Search tutorials..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8 border-gray-200 dark:border-gray-700 focus:border-pink-500 dark:focus:border-pink-400"
          />
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as TutorialTab)}>
        <TabsList className="grid grid-cols-3 bg-gray-100 dark:bg-gray-900 p-1 rounded-lg h-auto">
          <TabsTrigger 
            value="all"
            className="flex flex-col sm:flex-row items-center justify-center sm:gap-2 px-1 py-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-400 data-[state=active]:to-purple-400 data-[state=active]:text-white dark:data-[state=active]:text-white"
          >
            <BookOpen className="h-4 w-4 flex-shrink-0" />
            <span className="text-xs sm:text-sm font-medium">All</span>
          </TabsTrigger>
          <TabsTrigger 
            value="video"
            className="flex flex-col sm:flex-row items-center justify-center sm:gap-2 px-1 py-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-400 data-[state=active]:to-purple-400 data-[state=active]:text-white dark:data-[state=active]:text-white"
          >
            <Film className="h-4 w-4 flex-shrink-0" />
            <span className="text-xs sm:text-sm font-medium">Videos</span>
          </TabsTrigger>
          <TabsTrigger 
            value="article"
            className="flex flex-col sm:flex-row items-center justify-center sm:gap-2 px-1 py-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-400 data-[state=active]:to-purple-400 data-[state=active]:text-white dark:data-[state=active]:text-white"
          >
            <FileText className="h-4 w-4 flex-shrink-0" />
            <span className="text-xs sm:text-sm font-medium">Guides</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value={activeTab} className="mt-6">
          <div className="grid gap-6 md:grid-cols-2">
            {filteredTutorials.map((tutorial) => (
              <Card key={tutorial.id} className="border-purple-100 dark:border-purple-900 bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow duration-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-4">
                      <div className="rounded-lg bg-gradient-to-r from-pink-100 to-purple-100 dark:from-pink-900/20 dark:to-purple-900/20 p-2">
                        {tutorial.type === 'video' ? (
                          <PlayCircle className="h-6 w-6 text-pink-500 dark:text-pink-400" />
                        ) : (
                          <FileText className="h-6 w-6 text-purple-500 dark:text-purple-400" />
                        )}
                      </div>
                      <div>
                        <CardTitle className="text-lg text-gray-900 dark:text-gray-100">{tutorial.title}</CardTitle>
                        <CardDescription className="text-gray-600 dark:text-gray-400">{tutorial.description}</CardDescription>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2 mb-4">
                    <Badge className="bg-pink-100 dark:bg-pink-900/30 text-pink-700 dark:text-pink-300 hover:bg-pink-100 dark:hover:bg-pink-900/30">
                      {tutorial.category}
                    </Badge>
                    <Badge className="bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 hover:bg-purple-100 dark:hover:bg-purple-900/30">
                      {tutorial.duration}
                    </Badge>
                    {tutorial.tags.map((tag) => (
                      <Badge key={tag} className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-700">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                  <Button
                    variant="default"
                    className="w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white"
                    onClick={() => window.open(tutorial.url, '_blank')}
                  >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    {tutorial.type === 'video' ? 'Watch Tutorial' : 'Read Guide'}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
} 